# Deploy to Azure Kubernetes Service
# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
  branches:
    include:
    - master
  paths:
    include:
    - Bikes/*

resources:
- repo: self

variables:

  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: 'df9d8a54-286b-47af-8f89-e423226944da'
  imageRepository: 'bikes'
  containerRegistry: 'builddemo.azurecr.io'
  dockerfilePath: 'Bikes/Dockerfile'
  tag: '$(Build.BuildId)'
  
  # Kubernetes Namespace
  k8sNamespace: 'atul'
  k8sNamespaceforpr: $(system.pullRequest.sourceBranch)
  imagePullSecret: 'builddemodfb0-auth'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'

stages:
- stage: Build
  displayName: Build stage
  jobs:  
  - job: Build
    displayName: Build job
    pool:
      name: work-machine
      # vmImage: $(vmImageName)
    steps:

    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
        
    - task: PublishPipelineArtifact@0
      inputs:
        artifactName: 'charts'
        targetPath: 'Bikes/charts/bikes'

- stage: DeployToDefault
  displayName: Deploy to Default
  dependsOn: Build
  condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/heads/'))
  jobs:
  - deployment: Deploy
    displayName: Deploy job
    pool:
      name: work-machine
      # vmImage: $(vmImageName)
    environment: 'BikeSharingSampleApp'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadPipelineArtifact@1
            inputs:
              artifactName: 'charts'
              downloadPath: '$(System.ArtifactsDirectory)/charts'

          - task: KubernetesManifest@0
            displayName: Create imagePullSecret
            inputs:
              kubernetesServiceConnection: 'BikeSharingSampleApp'
              action: createSecret
              secretName: $(imagePullSecret)
              namespace: $(k8sNamespace)
              dockerRegistryEndpoint: $(dockerRegistryServiceConnection)

          - task: KubernetesManifest@1
            displayName: bake
            name: bake
            inputs:
              action: bake
              helmChart: '$(System.ArtifactsDirectory)/charts'
              overrides: |
                image.tag:$(Build.BuildId)
                buildID:"1"
               
          - task: KubernetesManifest@1
            displayName: deploy
            name: deploy
            inputs:
              kubernetesServiceConnection: 'BikeSharingSampleApp'
              action: deploy
              namespace: $(k8sNamespace)
              manifests: $(bake.manifestsBundle)
              imagePullSecrets: $(imagePullSecret)

- stage: DeployForPR
  displayName: Deploy to review app
  dependsOn: Build
  condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/pull/'))
  jobs:
  - deployment: Deploy
    displayName: Deploy job
    pool:
      name: work-machine
      # vmImage: $(vmImageName)
    environment: 'BikeSharing-PR'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadPipelineArtifact@1
            inputs:
              artifactName: 'charts'
              downloadPath: '$(System.ArtifactsDirectory)/charts'

          - bash: |
              Kubectl create ns $(system.pullRequest.sourceBranch)
              kubectl label --overwrite ns $(system.pullRequest.sourceBranch) azds.io/space=true
              kubectl label --overwrite ns $(system.pullRequest.sourceBranch) azds.io/parent-space=master
            displayName: 'Create PR space'

          - task: KubernetesManifest@0
            displayName: Create imagePullSecret
            inputs:
              kubernetesServiceConnection: 'BikeSharingSampleApp'
              action: createSecret
              secretName: $(imagePullSecret)
              namespace: $(k8sNamespaceforpr)
              dockerRegistryEndpoint: $(dockerRegistryServiceConnection)

          - task: KubernetesManifest@1
            displayName: bake
            name: bake
            inputs:
              action: bake
              helmChart: '$(System.ArtifactsDirectory)/charts'
              overrides: |
                image.tag:$(Build.BuildId)
                buildID:"1"

          - task: KubernetesManifest@1
            displayName: deploy
            name: deploy
            inputs:
              kubernetesServiceConnection: 'BikeSharingSampleApp'
              action: deploy
              namespace: $(k8sNamespaceforpr)
              manifests: $(bake.manifestsBundle)
              imagePullSecrets: $(imagePullSecret)
